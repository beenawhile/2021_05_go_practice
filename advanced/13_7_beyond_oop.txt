모든 프로그래머에게 OOP는 무조건 알아야하는 시대가 왔음
  - 가장 성공한 프로그래밍 기술 중의 하나

허나 OOP 역시 문제점을 안고 있음
 1. 잘하기 어렵다
  - 올바른 지식을 가지고 올바르게 숙달 해야함
  - 올바르게 지식을 얻는게 어려울 뿐더러 현실에서는 마감의 벽이 있기 때문에 숙달하기 쉽지 않음
  - 프로그램이 계속 변경되면서 발전해나가면서 관리하는 사람이 계속 바뀌기 때문에 처음의 좋은 구조를 유지하기 어려움
 2. 새로온 프로그래머가 파악하는데 시간이 오래걸린다
  - 좋은 OOP 프로그램일 경우, 모두 객체로 이루어져있어 파일 수가 많아지고 인계자가 그 구조를 파악하는데 시간이 오래 걸림
  
실리콘밸리를 중심으로 생긴 트랜드
  - Make fast
  - break things

OOP로 빨리 만들기 쉽지 않음
  - 빨리 만들려면 설계원칙이 많이 깨질 수 밖에 없음 => Tech Debt 가 많이 쌓일 수 밖에 없음

Tech Debt가 많이 쌓아 갑자기 성공한다? => 기반이 잘 쌓여있지 않기 때문에 견딜 수가 없음
  - 기술 부채를 최대한 빠르게 없애고 튼튼한 구조를 만들어 다음 스탭으로 나아가야함

가장 이상적인 것은 Make fast + low tech debt
  - OOP는 여기에 맞지 않음

절차적 -> OOP -> Stateless 로 가고 있음
  - 절차적 프로그래밍, OOP를 이용해 빠르게 만들 수 없었던 이유 => 상태와 기능이 혼재되어있었기 때문
  - stateless : 프로그래머가 기능만 만들자. 상태는 외부에서 가져와서 들어갈 수 있도록 만들자.
   => micro service, serverless, functional language, ECS(Entity Component System) 모두 stateless를 향해 가고 있는 것 임


Functional Language
  - erlang, lisp. f#, elixar, scala, haskel 등
  - 함수 중심의 코딩 방식
  - 상태를 아예 없애고 기능만 가지고 가자 => stateless

Micro Service
  - 웹페이지를 예로 들면, 각 부분을 따로따로 구현해서 서비스하는 것

Serverless
  - 하나의 서버가 아니라 여러 서버들로 하나의 서비스를 구성해서 취합해서 사용하자는 방식

ECS(Entity Component System)
  - Entity <- Component를 가지고 있음
  - Component의 조합으로 entity의 성격이 결정됨
  - component는 데이터만 가지고 있어야하고, System은 기능만 가지고 있어야 함
   => 데이터의 집적도(locality)가 좋아져 성능을 올릴 수 있는 계기가 됨, OOP의 단점을 타계할 수 있게 되기도 함

MVC(Model-View-Controller)

이 방향으로 왜 나가는 것인가? => 프로그래머 한 사람이 각자 할당된 부분만큼만 작성하여 빠르게 만들고 low tech debt으로 성공했을 때 빠르게 치고 나갈 수 있는 구조를 만드는 것
